kubectl port-forward consul-1 8500:8500

consul members

vault server -dev -dev-listen-address=0.0.0.0:8200 &
http://localhost:8200/ui/vault/secrets
export VAULT_ADDR='http://0.0.0.0:8200'

vault operator unseal

vault kv put secret/myapp database=mypassword
vault kv get secret/myapp

vault kv delete secret/myapp

vault secrets enable -path=aws aws
vault write aws/config/root access_key=12345 secret_key=12345$$$$$

vault secrets enable transit
vault write -f transit/keys/test

vault secrets enable krol
vault write -f krol/keys/test

### Setting kubernetes secrets
vault auth enable kubernetes

cat ~/.minikube/machines/minikube/config.json
minikube ip

kubectl create serviceaccount vault-auth
kubectl apply -f vault-auth-service-account.yml

# Create a policy named myapp-kv-ro
vault policy write myapp-kv-ro myapp-kv-ro.hcl

# Create test data in the `secret/myapp` path.
vault kv put secret/myapp/config username='appuser' password='suP3rsec(et!' ttl='30s'
---------------
# Enable userpass auth method
vault auth enable userpass
# Create a user named "test-user"
vault write auth/userpass/users/test-user password=training policies=myapp-kv-ro
------------------------
# Set VAULT_SA_NAME to the service account you created earlier
export VAULT_SA_NAME=$(kubectl get sa vault-auth -o jsonpath="{.secrets[*]['name']}")

# Set SA_JWT_TOKEN value to the service account JWT used to access the TokenReview API
export SA_JWT_TOKEN=$(kubectl get secret $VAULT_SA_NAME -o jsonpath="{.data.token}" | base64 --decode; echo)

# Set SA_CA_CRT to the PEM encoded CA cert used to talk to Kubernetes API
export SA_CA_CRT=$(kubectl get secret $VAULT_SA_NAME -o jsonpath="{.data['ca\.crt']}" | base64 --decode; echo)
------------------------
# Set K8S_HOST to minikube IP address
export K8S_HOST=$(minikube ip)

# Enable the Kubernetes auth method at the default path ("auth/kubernetes")
vault auth enable kubernetes

# Tell Vault how to communicate with the Kubernetes (Minikube) cluster
vault write auth/kubernetes/config token_reviewer_jwt="$SA_JWT_TOKEN" kubernetes_host="https://$K8S_HOST:8443" kubernetes_ca_cert="$SA_CA_CRT"

# Create a role named, 'example' to map Kubernetes Service Account to
#  Vault policies and default token TTL
vault write auth/kubernetes/role/example bound_service_account_names=vault-auth bound_service_account_namespaces=default policies=myapp-kv-ro ttl=24h
---------------
# the application
# Create a ConfigMap, example-vault-agent-config
$ kubectl create configmap example-vault-agent-config --from-file=./configs-k8s/

# View the created ConfigMap
$ kubectl get configmap example-vault-agent-config -o yaml

# Finally, create vault-agent-example Pod
$ kubectl apply -f example-k8s-spec.yml --record

-------------------
## vault hashicorp

export VAULT_ADDR='http://localhost:8200'

vault status

vault operator unseal

# consul
Three (3) node Consul cluster using a StatefulSet